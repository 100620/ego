#!/usr/bin/python3

import os
from datetime import datetime
from ego import EgoModule
from ego_helpers import Color, ago
from git_helper import GitHelper

class Module(EgoModule):

	def setup(self):
		self.repo = GitHelper(self, self.root)

	@property
	def root(self):
		if not hasattr(self, '_root'):
			root = self.config.meta_repo_root
			if not os.path.exists(os.path.dirname(root)):
				os.makedirs(os.path.dirname(root))
			self._root = root
		return self._root

	def add_arguments(self, parser):
		subparsers = parser.add_subparsers(title='actions', dest='action')
		status_parser = subparsers.add_parser('status', help="Show current kit settings.")
		status_parser.set_defaults(handler=self.meta_repo_info)
		show_parser = subparsers.add_parser('show', help="Alias for the status command.")
		show_parser.set_defaults(handler=self.meta_repo_info)
		list_parser = subparsers.add_parser('list', help="List all available kits.")
		list_parser.set_defaults(handler=self.kits_list)

	def kits_list(self, **options):

		if not self._output_header():
			return
		print("  " + Color.UNDERLINE + "kit".ljust(20), "is active?".ljust(15), "branch".ljust(15), "stability".ljust(9), Color.END)
		kit_sha1 = self.kit_sha1

		for kit in self.kit_info["kit_order"]:
			if kit not in kit_sha1:
				continue

			kit_branch, kit_default_branch = self.get_selected_kit(kit, True)

			if kit_branch == None:
				kit_branch = kit_default_branch
			firstline = True
			for branch in kit_sha1[kit].keys():
				if firstline:
					kit_out = Color.blue(kit)
					firstline = False
				else:
					kit_out = ""
				if branch == kit_branch:
					is_active = Color.blue("active")
					branch_out = Color.blue(branch)
				else:
					is_active = ""
					branch_out = branch
				print("  " + str(kit_out.ljust(20)), is_active.ljust(15), branch_out.ljust(15), self._get_branch_stability_string(kit, branch).ljust(15))

	def _output_header(self):
		if not os.path.exists(self.config.meta_repo_root):
			print("meta-repo does not exist and needs to be cloned.")
			return False

		sync_ago_string = ago(datetime.now() - self.repo.last_sync())
		print(Color.green(self.config.meta_repo_root) + " (updated %s):" % sync_ago_string)
		print()
		return True

	def _get_branch_stability_string(self, kit, kit_branch):
		kit_stability = self.kit_info["kit_settings"][kit]['stability'][kit_branch]
		if kit_stability == "prime":
			kit_stability = Color.green("prime")
		elif kit_stability == "near-prime":
			kit_stability = Color.blue("near-prime")
		elif kit_stability == "beta":
			kit_stability = Color.yellow("beta")
		elif kit_stability in ["alpha", "dev", "current"]:
			kit_stability = Color.red(kit_stability)
		return kit_stability

	def meta_repo_info(self, **options):
		"""
		This implements 'ego sync status' and is just a starting point. It currently displays the ego.conf-defined
		or default repo, but not the actual git repo that is selected on disk. So it should be a lot more sophisticated
		so that users can see when they've updated ego.conf but forgotten to run ego sync to update their meta-repo.
		"""

		if not self._output_header():
			return
		print("  " + Color.UNDERLINE + "kit".ljust(20), "active branch".ljust(20), "default".ljust(20), "stability".ljust(9) + Color.END)
		for kit in self.kit_info["kit_order"]:
			kit_branch, kit_default_branch = self.get_selected_kit(kit, True)
			if kit_branch == None:
				kit_branch = kit_default_branch
			if 'stability' in self.kit_info["kit_settings"][kit] and kit_branch in \
					self.kit_info['kit_settings'][kit]['stability']:
				kit_stability = self._get_branch_stability_string(kit, kit_branch)
			else:
				kit_stability = ""
			if kit_branch == kit_default_branch:
				print("  " + kit.ljust(20), Color.BLUE + kit_default_branch.ljust(20), "(same)".ljust(20), str(kit_stability).ljust(10) + Color.END)
			else:
				kb_out = kit_default_branch if kit_default_branch else "(None)"
				print("  " + kit.ljust(20), Color.CYAN + kit_branch.ljust(20), kb_out.ljust(20),
				      str(kit_stability).ljust(10) + Color.END)

	def handle(self, **options):
		handler = options.pop('handler', self.meta_repo_info)
		handler(**options)