#!/usr/bin/python3

from ego_helpers import *

import subprocess
import sys
import re

def runShell( cmd):
	print(cmd)
	return os.system(cmd)

def runShell_so(cmd):
	print(cmd)
	return subprocess.getstatusoutput(cmd)

class GitHelper(object):
	
	def __init__(self, root):
		self.root = root
	
	def localBranches(self):
		if os.path.exists(self.root):
			retval, out = runShell_so("(cd %s && git for-each-ref --format=\"(refname)\" refs/heads)")
			if retval == 0:
				for ref in out.split():
					yield ref.split("/")[-1]

	@property
	def currentLocalBranch(self):
		s, branch = runShell_so("( cd %s && git symbolic-ref --short -q HEAD )" % self.root)
		if s:
			return None
		else:
			return branch

	def localBranchExists(self, branch):
		if runShell("( cd %s && git show-ref --verify --quiet refs/heads/%s )" % ( self.root, branch)):
			return False
		else:
			return True

	def fetchRemote(self, branch, remote="origin"):
		runShell("(cd %s && git remote set-branches --add %s %s)" % ( self.root, remote, branch ))
		return runShell("(cd %s && git fetch %s refs/heads/%s:refs/remotes/%s/%s)" % ( self.root, remote, branch, remote, branch )) 

	def shallowClone(self, url, branch, depth=1):
		return runShell("(cd %s && git clone -b %s --depth=%s --single-branch %s)" % ( os.path.dirname(self.root), branch, depth, url )) 

	def createNewLocalBranchToTrackRemote(self, branch):
		return runShell("(cd %s && git checkout -b %s --track origin/%s)" % ( self.root, branch, branch )) 

	def pull(self, options=[]):
		opts=" ".join(options) if options else ""
		return runShell("(cd %s && git pull %s)" % (self.root, opts)) 

	def reset(self, options=[]):
		opts=" ".join(options) if options else ""
		return runShell("(cd %s && git reset %s)" % (self.root, opts)) 

	def clean(self, options=[]):
		opts=" ".join(options) if options else ""
		return runShell("(cd %s && git clean %s)" % (self.root, opts)) 

	def exists(self):
		return os.path.exists(self.root)
	
	def isGitRepo(self):
		return os.path.exists(os.path.join(self.root, ".git"))

	def checkout(self, branch="master", origin=None):
		if origin != None:
			args = "%s %s" % (origin, branch)
		else:
			args = branch
		out = runShell("(cd %s && git checkout %s)" % ( self.root, args ))
		if out == 0:
			return True
		else:
			return False
	
	@property
	def commitID(self):
		retval, out = runShell_so("(cd %s && git rev-parse HEAD)" % self.root)
		if retval == 0:
			return out.strip()
		else:
			return None

class MetaRepoSyncHandler(object):
	
	def __init__(self, config, install_path):
		self.config = config
		self.root = "/var/git/meta-repo"
		self.install_path = install_path
		self.load_metadata()
		self.hex_re = re.compile('[0-9a-fA-F]+')
	def load_metadata(self):
		self.kit_sha1 = self.load_kit_metadata("sha1")
		self.kit_info = self.load_kit_metadata("info")
	
	def load_kit_metadata(self, fn):
		ksf = os.path.join(self.root, "metadata/kit-%s.json" % fn)
		if os.path.exists(ksf):
			with open(ksf) as a:
				return json.loads(a.read())
		else:
			return {}

	def getSelectedKit(self, kit):
		# returns the kit selected in ego.conf, or if none specified there, the funtoo default kit
		branch = None
		if "kits" in self.config.settings and kit in self.config.settings["kits"]:
			branch = self.config.settings["kits"][kit]
		else:
			branch = self.kit_info["kit_settings"][kit]["default"]
		return branch

	def sync_meta_repo(self):
		repo = GitHelper(self.root)
		print(color.GREEN + "Syncing meta-repo" + color.END)
		if repo.exists():
			retval = repo.fetchRemote("master")
			retval = repo.pull(options=["-f","--no-recurse-submodules"])
			if retval != 0:
				print(color.RED + "There was an error syncing meta-repo." , color.END)
				sys.exit(1)

		else:
			repo.shallowClone("https://github.com/funtoo/meta-repo", "master")
		self.load_metadata()
		fails = []
		for kt in self.kit_info["kit_order"]:
			branch = None
			if "kits" in self.config.settings:
				if kt in self.config.settings["kits"]:
					branch = self.config.settings["kits"][kt]
			success = self.sync_kit(kt, branch=branch)
			if not success:
				fails.append((kt, branch))
		if len(fails):
			for kt, branch in fails:
				print(color.RED + "There was an error syncing %s." % kt, color.END)
			return False
		else:
			print(color.GREEN + "Sync successful and kits in alignment! :)" + color.END)
			print(color.GREEN + "Updating profiles..." + color.END)
			ego_profile = get_ego_module(self.install_path, "profile")
			ego_profile.main(self.install_path, self.config, [ "update" ] )
			return True

	def sync_kit(self, kit_name, branch=None):
		if branch == None:
			# use default
			branch = self.kit_info["kit_settings"][kit_name]["default"]
		if branch == None:
			print(color.RED + "Fatal: branch cannot be None." + color.END)
			sys.exit(1)
		if branch == self.kit_info["kit_settings"][kit_name]["default"]:
			print(color.PURPLE + "Syncing", kit_name, "branch", branch, color.END)
		else:
			# highlight non-default branches in green for convenience
			print(color.PURPLE + "Syncing", kit_name, "branch", color.GREEN + branch + color.PURPLE + " (non-default)" + color.END)
		kit_path = os.path.join(self.root, "kits", kit_name)
		kit = GitHelper(kit_path)
		if not kit.isGitRepo():
			try:
				os.rmdir(kit.root)
			except OSError:
				pass
		if kit.exists() and not kit.isGitRepo():
			print("fatal - kit %s is not a git repository" % kit_name)
			sys.exit(1)
		elif not kit.exists():
			kit.shallowClone("https://github.com/funtoo/%s" % kit_name, branch)

		if not kit.localBranchExists(branch):
			kit.fetchRemote(branch)
		kit.checkout(branch)
		kit.reset(options=["--hard"])
		kit.clean(options=["-fd"])
		kit.pull(options=["-f"])
	
		# do sync
		sha1 = kit.commitID
		desired_sha1 = self.kit_sha1[kit_name][branch]
		success = False

		def sha1_check(sha1, desired_sha1):
			if not self.hex_re.match(sha1):
				print(color.RED + "Fatal: kit CommitID not a SHA1: %s" % sha1 + color.END)
				sys.exit(1)
			if not self.hex_re.match(desired_sha1):
				print(color.RED + "Fatal: kit-sha1.json value not a SHA1: %s" % desired_sha1 + color.END)
				sys.exit(1)

		sha1_check(sha1, desired_sha1)

		if (sha1 == desired_sha1):
			return True
		else:
			retval = kit.fetchRemote(branch)
			sha1 = kit.commitID
			sha1_check(sha1, desired_sha1)
			if (sha1 != desired_sha1):
				success = kit.checkout(desired_sha1)
		return success

def main(install_path, config, args):
	s = MetaRepoSyncHandler(config, install_path)
	s.sync_meta_repo()

# vim: ts=4 sw=4 noet
