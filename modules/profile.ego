#!/usr/bin/python3
import argparse
import json
import os
import sys

if os.path.exists("/usr/share/portage/pym"):
	sys.path.insert(0, "/usr/share/portage/pym")
import portage

from ego import EgoModule
from ego_helpers import Color, get_ego_module


# ProfileLister will allow us to see what profile settings -- flavors, subarches, mix-ins, builds --
# are available. It is initialized by specifying a repository directory, a path to an ego.desc file
# in the repository (which is JSON that in turn contains paths to where to find each type of sub-
# profile, such as mix-ins being in "funtoo/1.0/linux-gnu/mix-ins", for example, and a system arch,
# which typically comes from the ProfileSetting object.

# ProfileLister dynamically calculates the path of the subarches, as archpath + "/" + arch +
# "subarch".

class ProfileLister:

	def __init__(self, repodir, p, valid_profiles=None, arch=None):
		self.repodir = repodir
		self.valid_profiles = valid_profiles
		# info is a dict: key is a profile type, like "flavor", and value is a sub-path to its location,
		# relative to repodir.
		self.info = {}
		self.arch = arch
		if os.path.exists(p):
			with open(p, "r") as ed:
				self.info = json.loads(ed.read())
		for k in self.info:
			if not isinstance(self.info[k], list):
				# move everything inside a list. We can have multiple mix-in directories now (subarch mix-ins, etc.)
				self.info[k] = [self.info[k]]
		if "mix-ins" not in self.info:
			self.info["mix-ins"] = []
		# The subarch entry is dynamically generated based on the system's arch. We assume we only have one arch set:
		if arch is not None and "arch" in self.info:
			self.info["subarch"] = [self.info["arch"][0] + "/" + self.arch + "/subarch"]
			# We now have subarch mix-ins! Specific to subarches. :)
			self.info["mix-ins"].append(self.info["arch"][0] + "/" + self.arch + "/mix-ins")

	# keys() returns a list of types of sub-profiles that are defined on this system.

	def keys(self):
		return [k for k in self.valid_profiles if k in self.info]

	# __getitem__ allows dict-style access to the location(s) for each profile. A list is returned, of
	# paths relative to repodir. Since Funtoo supports multiple locations for each type of profile, the
	# find() method can be used to find the actual location of a specific sub-profile.

	def __getitem__(self, key):
		return self.info.get(key)

	# list() will return a list of all available sub-profiles of a particular type.

	def list(self, key):
		things = []
		for item in self[key]:
			p = self.repodir + "/" + item
			if os.path.exists(p):
				for thing in os.listdir(p):
					if os.path.isdir(p + "/" + thing):
						things.append(thing)
		return things

	# find() will find the location of a particular sub-profile named 'val' of type 'key'. An
	# absolute path is returned, or None if not found.

	def find(self, key, val):
		if key not in self.info:
			return None
		for path in self.info[key]:
			if os.path.exists(os.path.join(self.repodir, path, val)):
				return path
		return None


# ProfileSetting will recurse into the system's profile settings and determine heirarchical relationships
# of the profile, and create a tree of ProfileSetting objects (linked via self.child, self.descendents).

# We use this for seeing everything that gets enabled from a particular flavor or mix-in. When a user updates
# a profile setting, we tweak the top object's decendents info. Then the write() method will write out the
# updated information.
class ProfileSetting:

	def __init__(self, config=None, ego_module=None, repomap=None, name=None, reponame=None, all_enabled=None,
				valid_profiles=None, cl=None, path=None, child=None, parent_line=None, top=None):
		global upgrade_to_core_kit
		self.ego_module = ego_module
		self._reponame = reponame
		self.valid_profiles = valid_profiles
		self.all_enabled = all_enabled
		self.config = config
		if repomap is None:
			repomap = {}
		if top is None:
			top = {"mix-ins": None, "flavor": None}

		# For user-specified settings (changing flavors, etc.) -- we use self.name, and self.cl (for type)

		self.name = name
		self.cl = cl

		# Child maps to the direct child of this profile entry -- this means the one that referenced
		# this one in the parent file.

		self.child = child

		# Parent_line contains line from the parent file that refers to this profile entry.

		self.parent_line = parent_line

		# for top-level (user-selected) flavors and mix-ins, self.inherited will hold a list of
		# child flavors and mix-ins inherited via parent.

		self.inherited = {"mix-ins": [], "flavor": []}

		# Reposmap is a dict that maps a repository name, such as "gentoo" to the associated
		# profile directory path (i.e. "/usr/portage/profiles")

		self.repomap = repomap

		# Descendents contains a dict, which is populated with keys such as "flavor", "mix-ins", etc.
		# The values are a list of all direct descendents of that type.

		self.descendents = {}

		# Top is used for updating self.inherited properly. It tracks the top-most flavor or mix-in,
		# which is the user-selected one. Top-most flavor is self.top["flavor"], etc.

		# If we are a mix-in or flavor, we get added to self.top["flavor"] and self.top["mix-ins"]
		# inherited[self.cl] list.

		self.top = top
		self.path = path

		if cl is None:
			self.cl = self.classify()
		else:
			self.cl = cl

		if self.cl in all_enabled:
			all_enabled[self.cl].add(self.shortname)

		self.parentfile = None

		if reponame == "core-kit" and self.reponame and self.reponame == "gentoo":
			upgrade_to_core_kit = True

		if path is not None:

			# If we are creating a fake ProfileSetting to change a flavor, etc, then path will be None.
			# If we are reading in an existing ProfileSetting, we do a lot of processing, including
			# figuring out what kind of profile setting we are, recursing on any parents, etc.

			parentfile = path + "/parent"
			self.lines = []
			if os.path.exists(parentfile):
				self.parentfile = parentfile
				a = open(parentfile, "r")
				for l in a.readlines():
					self.lines.append(l.strip())
				a.close()
			self.parents = []
			self.path = path

			if self.cl in ["flavor", "mix-ins"]:
				for ty in ["flavor", "mix-ins"]:
					if self.top[ty] is not None:
						self.top[ty].inherited[self.cl].append(self)
			self._process()

	@property
	def reponame(self):
		if self.parent_line is None:
			return None
		sp = self.parent_line.split(":")
		if len(sp) == 2:
			return sp[0]
		else:
			return None

	def _nextTop(self):
		# This function returns a dict of top values to be used by _process()
		out = {}
		for k in ["mix-ins", "flavor"]:
			if self.top[k]:
				out[k] = self.top[k]
			elif self.cl == k:
				out[k] = self
			else:
				out[k] = None
		return out

	@property
	def shortname(self):
		if self.name:
			return self.name
		return self.path.split("/")[-1]

	def _process(self):
		for l in self.lines:
			l = l.split("#")[0]
			if len(l) == 0:
				continue
			colsplit = l.split(":")
			if l[0] == ":":
				# ":base" format
				ps = ProfileSetting(
					repomap=self.repomap, ego_module=self, config=self.config, valid_profiles=self.valid_profiles,
					all_enabled=self.all_enabled, reponame=self._reponame,
					path=os.path.join(self.repomap[self._reponame], l[1:]), child=self, parent_line=l, top=self._nextTop(),
				)
			elif len(colsplit) == 2 and colsplit[0] in self.repomap:
				# "gentoo:foo" format
				ps = ProfileSetting(
					repomap=self.repomap, ego_module=self, config=self.config, valid_profiles=self.valid_profiles,
					all_enabled=self.all_enabled, reponame=self._reponame,
					path=os.path.join(self.repomap[colsplit[0]], colsplit[1]), child=self, parent_line=l, top=self._nextTop(),
				)
			else:
				# "../../foo/bar" format
				ps = ProfileSetting(
					repomap=self.repomap, ego_module=self, config=self.config, valid_profiles=self.valid_profiles,
					all_enabled=self.all_enabled, reponame=self._reponame, path=os.path.normpath(os.path.join(self.path, l)),
					child=self, parent_line=l, top=self._nextTop(),
				)
			self.parents.append(ps)
			if ps.cl not in self.descendents:
				self.descendents[ps.cl] = []
			self.descendents[ps.cl].append(ps)

	def classify(self):
		ps = self.path.split("/")
		pstag = ps[-2:-1][0]
		if pstag in self.valid_profiles:
			return pstag
		else:
			return "misc"

	def _genProfileString(self, key_order, valid_multi_profiles):
		out = ""
		for key in key_order:
			if key in self.descendents and len(self.descendents[key]):
				if key in valid_multi_profiles:
					for item in self.descendents[key]:
						if item.parent_line.startswith("gentoo:"):
							out += "core-kit:" + item.parent_line[7:] + "\n"
						else:
							out += item.parent_line + "\n"
				else:
					if self._reponame == "core-kit" and self.descendents[key][0].reponame == "gentoo":
						# convert "gentoo" references to "core-kit"
						self.descendents[key][0].parent_line = "core-kit:" + self.descendents[key][0].parent_line.split(":")[1]
					out += self.descendents[key][0].parent_line + "\n"
		python_kit_branch = self.ego_module.get_configured_kit("python-kit")
		for kit in os.listdir(self.config.kit_root):
			python_path = os.path.join(self.config.kit_root, kit, "profiles/funtoo/kits/python-kit/", python_kit_branch)
			if os.path.exists(python_path):
				out += "%s:funtoo/kits/python-kit/" % kit + python_kit_branch + "\n"
		return out

	def write(self, key_order, valid_multi_profiles):
		if not self.parentfile:
			return
		out = self._genProfileString(key_order, valid_multi_profiles)
		with open(self.parentfile, "w") as f:
			f.write(out)


class MultiChoicesAction(argparse.Action):

	def __init__(self, *args, **kwargs):
		self.multi_choices = kwargs.pop('choices')
		return super().__init__(*args, **kwargs)

	def __call__(self, parser, namespace, values, option_string=None):
		for value in values:
			if value not in self.multi_choices:
				raise argparse.ArgumentError(self, "invalid choice: %r (choose from %s)" % (
					value, ', '.join([repr(c) for c in self.multi_choices])))
		setattr(namespace, self.dest, values)


class Module(EgoModule):

	# Somewhat self-explanatory, these list profiles that can be specified (up to once), ones that can
	# be specified up to multiple times, all types of profiles, and all types of actions that this
	# module can perform.
	key_order = ["arch", "build", "subarch", "flavor", "mix-ins"]
	required_profiles = ["arch", "build", "flavor"]
	valid_single_profiles = ["flavor", "build", "arch", "subarch"]
	valid_multi_profiles = ["mix-ins"]
	valid_profiles = valid_single_profiles + valid_multi_profiles

	def add_arguments(self, parser):
		subparsers = parser.add_subparsers(title='actions', dest='action')

		show_parser = subparsers.add_parser('show', help="Print your profiles")
		show_parser.set_defaults(handler=self.handle_show_action)

		show_json_parser = subparsers.add_parser('show-json', help="Print your profiles in JSON format")
		show_json_parser.set_defaults(handler=self.handle_show_json_action)

		get_parser = subparsers.add_parser('get', help="Print the value of a given profile")
		get_parser.add_argument('profile', choices=self.valid_profiles)
		get_parser.set_defaults(handler=self.handle_get_action)

		list_parser = subparsers.add_parser('list', help="List given profiles (or all by default)")
		list_parser.add_argument('profiles', nargs='*', choices=self.valid_profiles, action=MultiChoicesAction, help=(
			"Profiles to show: %s" % ', '.join(self.valid_profiles)
		))
		list_parser.set_defaults(handler=self.handle_list_action)

		update_parser = subparsers.add_parser('update', help="Update your profiles (/etc/portage/make.profile/parent)")
		update_parser.set_defaults(handler=self.handle_update_action)

		single_profile_parsers = [
			subparsers.add_parser('arch', help="Change your arch profile"),
			subparsers.add_parser('build', help="Change your build profile"),
			subparsers.add_parser('subarch', help="Change your subarch profile"),
			subparsers.add_parser('flavor', help="Change your flavor profile"),
		]
		for subparser in single_profile_parsers:
			subparser.add_argument('new_value')
			subparser.set_defaults(handler=self.handle_single_profile_actions)

		mixins_parser = subparsers.add_parser('mix-ins', aliases=['mix-in'], help="Change your mix-ins profile")
		mixins_parser.add_argument('mixins', nargs='*')
		mixins_parser.set_defaults(handler=self.handle_mix_ins_action)

	def header(self, info):
		self.log("\n=== " + Color.BOLD + Color.GREEN + info + Color.END + ": ===\n")

	def python_info(self):
		self.header("Python kit")
		self.log("%s%12s%s: %s%s%s" % (
			Color.BOLD, "branch", Color.END, Color.CYAN, self.get_configured_kit("python-kit"), Color.END))

	def short_list(self, ps, key_order):
		self.header("Enabled Profiles")
		for key in key_order:
			if key not in ps.descendents or len(ps.descendents[key]) == 0:
				self.log("%s%12s%s: (not set)" % (Color.BOLD, key, Color.END))
			else:
				for item in ps.descendents[key]:
					self.log("%s%12s%s: %s%s%s" % (Color.BOLD, key, Color.END, Color.CYAN, item.shortname, Color.END))
		self.log("")

	def short_JSON(self, ps, key_order):
		outdict = {}
		for key in key_order:
			outdict[key] = []
			if key not in ps.descendents:
				continue
			for item in ps.descendents[key]:
				out = {}
				out["shortname"] = item.shortname
				if item.path is not None:
					out["path"] = item.path
				outdict[key].append(out)
		return outdict

	def get_profile_lister(self):
		if "arch" in self.ps.descendents and len(self.ps.descendents['arch']) != 0:
			# We list subarches based on the arch path, ie. "arch/x86-64bit/subarch" -- so we need to provide arch name:
			return ProfileLister(
				self.repodir, self.egodescfile, valid_profiles=self.valid_profiles, arch=self.ps.descendents["arch"][0].shortname
			)
		else:
			return ProfileLister(self.repodir, self.egodescfile, valid_profiles=self.valid_profiles)

	def handle_show_action(self, **options):
		self.short_list(self.ps, self.key_order)
		self.python_info()
		inherited_things = []
		if "flavor" in self.ps.descendents and len(self.ps.descendents["flavor"]):
			# follow first flavor:
			inherited_things.append(self.ps.descendents["flavor"][0])
		if "mix-ins" in self.ps.descendents:
			# follow all mix-ins:
			inherited_things.extend(self.ps.descendents["mix-ins"])

		for item in inherited_things:
			for x in ["flavor", "mix-ins"]:
				ilist = item.inherited[x]
				# pluralize output if needed:
				if x[-1] != "s":
					x += "s"
				if ilist:
					icl = item.cl
					# de-pluralize
					if icl == "mix-ins":
						icl = "mix-in"
					self.header("All inherited %s from %s %s" % (x, item.shortname, icl))
					for i in ilist:
						if i == i.child:
							continue
						iccl = i.child.cl
						# de-pluralize
						if iccl == "mix-ins":
							iccl = "mix-in"
						self.log("      %s%26s%s (from %s %s)" % (Color.CYAN, i.shortname, Color.END, i.child.shortname, iccl))
		self.log("")

	def handle_update_action(self, **options):
		try:
			self.ps.write(self.key_order, self.valid_multi_profiles)
		except PermissionError:
			self.fatal("You do not have permission to update profiles.")

	def handle_show_json_action(self, **options):
		self.log(json.dumps(self.short_JSON(self.ps, self.key_order), indent=4))

	def handle_get_action(self, **options):
		profile = options['profile']
		short_json = self.short_JSON(self.ps, self.key_order)
		self.log(' '.join(p['shortname'] for p in short_json[profile]))

	def handle_list_action(self, **options):
		pl = self.get_profile_lister()
		# Time to list all available profile settings.
		profiles = options['profiles']

		for key in pl.keys():
			if profiles and key not in profiles:
				# user-specified sub-list, only list those things
				continue

			# active_keys: Names of active (currently enabled explicitly by user) profile keys
			# of this type (ie. flavor, etc.). These active ones will get highlighted differently.

			active_keys = []
			if key in self.ps.descendents:
				for value in self.ps.descendents[key]:
					active_keys.append(value.shortname)

			self.header(key)
			items = pl.list(key)
			items.sort()

			# We handle our own output formatting/spacing/newlines. These vars are used for this.
			# lpos - column position; maxpos - when to wrap; count - item count.

			lpos = 4
			maxpos = 60
			count = 0

			# write each item out -- when we cross maxpos characters, add a newline and indent:
			self.echo(" " * lpos)
			if not items:
				self.echo("None available")
				continue
			for x in items:
				if lpos > maxpos:
					self.echo("\n")
					lpos = 4
					self.echo(" " * lpos)
				if x in active_keys:
					# make it stand out if it explicitly enabled:
					outx = Color.BOLD + Color.CYAN + x + "*" + Color.END
					if key in ["arch", "build"]:
						# parens to mark as read-only -- USE style. Not really read-only but should
						# not generally be changed by user.
						outx = "(" + outx + ")"
				elif key in self.all_enabled and x in self.all_enabled[key]:
					# highlight if enabled through inheritance:
					outx = Color.DARKCYAN + x + Color.END
				else:
					outx = x
				count += 1
				if count == 1 or lpos == 4:
					self.echo(outx)
					lpos += len(x)
				else:
					self.echo(", " + outx)
					lpos += len(x) + 2
			self.log("")
		self.log("")

	def handle_single_profile_actions(self, **options):
		action = options['action']
		newset = options['new_value']
		pl = self.get_profile_lister()
		if action in ["build", "arch"]:
			if action in self.ps.descendents and len(action) > 0:
				self.warning("%s already set to %s -- typically, user should not change this." % (
					action, self.ps.descendents[action][0].shortname))
		if newset not in pl.list(action):
			self.fatal("%s %s not available. Can't set." % (action, newset))
		self.writeout = True
		# ps is the head of our heirarchy of ProfileSettings. Hack it -- inject our new profile info as a
		# direct descendent of ps. Then the write() function will write the correct stuff out to the
		# profile.
		action_path = pl.find(action, newset)
		self.ps.descendents[action] = [
			ProfileSetting(
				config=self.config, ego_module=self, repomap=self.ps.repomap, name=newset, reponame=self.reponame,
				all_enabled=self.all_enabled, valid_profiles=self.valid_profiles, cl=action,
				parent_line='%s:%s/%s' % (self.reponame, action_path, newset), child=self.ps,
			)
		]
		self.short_list(self.ps, self.key_order)
		self.log(">>> Set %s to %s." % (action, newset))

	def handle_mix_ins_action(self, **options):
		mixins = options['mixins']
		pl = self.get_profile_lister()
		adds = set()
		subs = set()
		for mixin in mixins:
			if mixin[0] == "-":
				subs.add(mixin[1:])
			elif mixin[0] == "+":
				adds.add(mixin[1:])
			else:
				adds.add(mixin)
		valids = pl.list("mix-ins")
		for mixin in adds.union(subs):
			if mixin not in valids:
				self.fatal("Error: %s is not a valid mix-in." % mixin)
		p = 0
		# remove "-" arguments.
		removed = set()
		if "mix-ins" in self.ps.descendents:
			while p < len(self.ps.descendents["mix-ins"]):
				sn = self.ps.descendents["mix-ins"][p].shortname
				if sn in subs:
					del self.ps.descendents["mix-ins"][p]
					removed.add(sn)
					self.writeout = True
					continue
				p += 1
		# get currently active mix-ins:
		active = []
		if "mix-ins" in self.ps.descendents:
			active = [x.shortname for x in self.ps.descendents["mix-ins"]]
		notadded = set()
		added = set()
		for new_shortname in adds:
			if new_shortname in active:
				notadded.add(new_shortname)
				continue
			mixin_path = pl.find("mix-ins", new_shortname)
			new_ps = ProfileSetting(
				config=self.config, ego_module=self, repomap=self.ps.repomap, name=new_shortname, cl="mix-ins",
				all_enabled=self.all_enabled, parent_line=self.reponame + ":" + mixin_path + "/" + new_shortname,
				child=self.ps,
			)
			if "mix-ins" not in self.ps.descendents:
				self.ps.descendents["mix-ins"] = []
			self.ps.descendents["mix-ins"].append(new_ps)
			added.add(new_shortname)
			self.writeout = True

		# Do all output here -- our shortList() will reflect the mix-in changes made above. Then put informational messages
		# underneath for readability:

		self.short_list(self.ps, self.key_order)
		for mixin in subs.difference(removed):
			self.warning("Mix-in %s not found, not removing." % mixin)
		for mixin in notadded:
			self.warning("Mix-in %s already active, not adding." % mixin)
		for mixin in removed:
			self.log(">>> Removed %s mix-in." % mixin)
		for mixin in added:
			self.log(">>> Added %s mix-in." % mixin)

	def handle(self, **options):
		portdir = portage.settings.repositories.mainRepoLocation()
		self.repodir = portdir + "/profiles"
		self.egodescfile = self.repodir + "/profiles.ego.desc"

		upgrade_to_core_kit = False

		# We use /etc/portage/make.profile as our starting point for resolving profile settings.

		profiledir = "/etc/portage/make.profile"

		# The reponame file is used for resolving profiles, particularly those set in /etc/portage/make.profile,
		# which reference a repository name, as in:

		# gentoo:funtoo/1.0/linux-gnu/arch/x86-64bit.

		reponamefile = os.path.join(self.repodir, "repo_name")

		if os.path.exists(reponamefile):
			with open(reponamefile, "r") as rnf:
				self.reponame = rnf.read().strip()
		else:
			self.fatal("Unable to find the repository name in %s - exiting." % reponamefile)

		# connect to ego sync module:

		# all_enabled is used to record all enabled sub-profile settings, even those enabled through inheritance.
		# It is a dict that is indexed by sub-profile type. Each key has a value that is a list.

		self.all_enabled = dict((p, set()) for p in self.valid_profiles)

		# Use ProfileSetting to recurse into the current system's profile settings, and see what is enabled and inherited.
		self.ps = ProfileSetting(
			config=self.config, ego_module=self, repomap={self.reponame: self.repodir}, reponame=self.reponame,
			path=profiledir, valid_profiles=self.valid_profiles, all_enabled=self.all_enabled
		)

		# If the profile needs to be written out for any reason, to either update it or fix it, writeout will be set to
		# true.

		self.writeout = upgrade_to_core_kit

		handler = options.pop('handler', self.handle_show_action)
		handler(**options)

		for x in self.ps.parents:
			c = x.cl
			if c in self.valid_single_profiles and len(self.ps.descendents[c]) > 1:
				self.warning("Extra profile of type '%s' defined: '%s'. Will be removed." % (c, x.shortname))
				self.writeout = True
		for key in self.required_profiles:
			if key not in self.ps.descendents:
				self.warning("No %s defined. Please set a %s." % (key, key))

		if self.writeout:
			if upgrade_to_core_kit:
				self.warning("Upgrading gentoo repository references to core-kit.")
			try:
				self.ps.write(self.key_order, self.valid_multi_profiles)
			except PermissionError:
				self.fatal("You do not have permission to update profiles.")

	def __call__(self, *args):
		# Little trick to force end of arguments when using mix-ins command to
		# prevent argparse from considering "-foo" as an argument.
		if len(args) and '--' not in args and args[0] in ['mix-in', 'mix-ins']:
			args = (args[0], '--') + args[1:]
		super().__call__(*args)

# vim: ts=4 noexpandtab sw=4
